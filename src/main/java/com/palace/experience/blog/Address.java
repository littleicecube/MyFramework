package com.palace.experience.blog;

import org.junit.Test;

import com.palace.seeds.utils.MovPrint;

public class Address {
	
/**
 * 

在32位模式下
我们在编写c语言程序时能获取到一个变量的内存地址并打印出来,这个地址是程序在编译完成后的逻辑意义上的地址,这个逻辑
意义上的地址空间大小是4GB,但是这4GB并不是真实可用的物理内存地址空间.如果每个程序都在4GB真实可用的物理地址空间上
运行,那么我们装有4GB物理内存的计算机同一时刻就只能运行一个程序,实际中我们的计算机中运行了成百上千个程序,为保证多
个进程能同时在同一个4GB的物理内存空间中运行操作系统中完成了从逻辑地址(暂时忽略程序逻辑地址到线性地址的映射关系,假
设程序的逻辑地址=线性地址)到物理地址的映射关系的维护.

逻辑地址空间的体现:逻辑地址空间体现在编译完成后的可执行程序中,编译完成后的可执行程序是按一定规则先后顺序编排完成
的,通常情况下划分有代码段,数据段和堆栈段


程序启动时,操作系统加载程序加载可执行文件并按照一定的规则进行解析,创建一个进程控制块,进程控制块是操作系统在分配的
内存上维护的一个数据结构,数据结构中保存了程序的入口地址,段基地址,段限长,权限,和其他的运行时信息.linux上可以解析ELF
格式可执行程序加载到内存中
操作系统为每个进程维护了一套内存映射关系表,用来把可执行程序中的线性地址转换成真实的物理地址

操作系统为每个进程维护了一套内存映射关系表,用来把可执行程序中的线性地址转换成真实的物理地址
	获取一行可执行程序代码的的线性地址
	获取当前进程的内存关系映射表(页目录页表),根据线性地址通过映射关系转换获取真实的物理地址
	获取真实物理地址处的内容并执行


1K = 2^10 = 1024
1M = 2^20 = 2^10 * 2^10 = 1024 * 1024
1G = 2^30 = 2^10 * 2^10 * 2^10 = 2014 * 1024 * 1024
4G = 2^32 = 2^10 * 2^10 * 2^10 * 2^2 = 1024 * 1024 * 1024 * 4 
 一根地址线寻址一个地址,一个地址对应一个有8bit的内存空间,称为一个字节1B,32根地址线有2^32种可能,每一种可能寻址一个字节
 即1B,那么32根地址线共可以寻址2^32 * 1B = 4GB
 	
 	4GB空间的最后一个地址用0xFFFFFFE来表示,这个地址需要32个bit位即4B的物理空间来存储,假设从物理内存中分配出4KB的物理内
 存,4B能内存一个地址,那么4KB能够存储1024个内存的地址,假设存在一个地址A指向地址空间中的一个起始地址,我们将已地址A开始以
 后的4K长度的内存称为一页内存,一页内存的大小为4KB,那么在4GB的地址空间中共有4GB/4KB=(4 * 2^30) / (4 * 2^10)=2^20 = 1M个
 内存页面,这1M个内存页面共有1M个起始地址,每个起始地址需要4B的物理内存,那么共需要1M * 4B = 4MB的物理内存来存储.
 
 我们设定:一页内存的大小为4KB
 页表和页表项:
 	4GB的内存空间共有4GB/4KB=4^30/4^10=2^20=1M个4KB大小的页面,每个页面都有一个基地址,那么1M个页面共有1M个基地址,这1M个
 基地址统称为页表,每个基地址需要4B的内存空间来存放,那么这1M个基地址需要1024M*4B=1024*1024*4B=4MB的内存来存储,每一个地址
 项称为页表项
 页目录和页目录项:
 	将1M个页表项按每组1K=1024个进行划分,那么可以划分为1M/1K=2^20/2^10=2^10=1024个组,每个组都有一个基地址,那么这1024个组共有
1024个基地址,这1024个基地址称为页目录,每个页目录基地址需要4B的内存空间来存放,那么这1024个页目录基地址需要1024*4B = 4KB的内
 存来存储,每一项称为页目录项
 	划分完成后:4GB的地址空间共有4M个页表项和1K个页目录项来表示,共需要4MB(页表占用的内存空间)+4KB(页目录占用的内存空间) = 4.4MB空间	
	如果为每个进程创建完整的页目录和页表项,将会占用过多的物理内存,在实际情况中,每个进程都不是完全利用了4GB的线性地址空间,故不需要创
建完整的页目录和页表的映射关系而是在运行时根据需要创建对应的页目录和页表并进行映射操作

    页目录表:每一项大小32位4字节	                                     页表:每一项大小32位4字节,1024个为一组                               真实的物理内存页:每页大小4KB
+-------------------------------------+ 第1个页表项                 +---------------------------------+----+              +---------------------------------+----+
|第1组页表的物理基地址(32位,4字节)	  		  +----------------------------->  第1个4KB内存页的物理基地址     +------------------->                                 |    |
+-------------------------------------+ 第1025个页表项              +---------------------------------+    |              +---------------------------------+    |
|第2组页表的物理基地址                +---------------------------+ |  ......                         |  共1024项         |                                 |    |
+-------------------------------------+ 第(1023*1024+1)个页表项   | +---------------------------------+    |              +---------------------------------+   4KB
|......                               +-------------------------+ | |  (32位,4字节)                   |    |              |                                 |    |
+-------------------------------------+                         | | +---------------------------------+----+              +---------------------------------+    |
| 第1023组页表的物理基地址            |                         | |                                                       |                                 |    |
+-------------------------------------+                         | |                                                       +---------------------------------+----+
|第1024组页表的物理基地址             |                         | |
+-------------------------------------+                         | | +---------------------------------+----+
                                                                | +-> 第1025个4KB内存页的物理基地址   +---------------+
                                                                |   +---------------------------------+    |          |   +---------------------------------+----+
                                                                |   | ......                          | 共1024项      +--->                                 |    |
                                                                |   +---------------------------------+    |              +---------------------------------+    |
                                                                |   |                                 |    |              |                                 |    |
                                                                |   +---------------------------------+----+              +---------------------------------+   4KB
                                                                |                                                         |                                 |    |
                                                                |                                                         +---------------------------------+    |
                                                                |                                                         |                                 |    |
                                                                |   +---------------------------------+----+              +---------------------------------+----+
                                                                +--->                                 |    |
                                                                    +---------------------------------+    |
                                                                    | ......                          | 共 1024项
                                                                    +---------------------------------+    |
                                                                    |                                 |    |
                                                                    +---------------------------------+----+





分配物理内存时是页为单位的,一页内存大小是
 线 性 地 址 :0x00402001  二 进 制 形 式 : 0000000001,0000000010,000000000001
+---------------------------------+-----------------------------------------+-----------------------------------------------+
|        0000000001(高 10位)      |                0000000010(中间10位)     |                   000000000001(低 12位)       |
+----------------------+----------+-------------------------+---------------+-----------------------+-----------------------+
                       |                                    |                                       |
             获取页目录表中的第2个页目录项        获取页表中的第3个页表项                                          					|
                       |                                    |                                       |
                       |                                    |                                       |
当前进程的页目录表在   |                                    |                                       |
物理内存中的基地址     |         页目录表项,存储着页表      |                                       |
                       |         在物理内存中的基地址       |                                       |
 cr3寄存器             |                                    |                                       |          +-----------+
+-----------------+    |           页目录                   |                                       |          |           |
|页目录物理基地址 |    |         +---------------+          |                                       |          +-----------+
+-------+---------+    | 		 |	 目录表第1项 |          |              页表                    	|          |           |
        |              |         +---------------+          |         +---------------+             |          +-----------+
        +--------------v--------->页表物理基地址 +-+        |页表第1项|               |             |          |           |
      根据页目录的物理基地址加   +---------------+ |        |         +---------------+             |          +-----------+
      上线性地址中指定的页目录   |               | |        |页表第2项|               |             |          |           |
        	的偏移量   			 +---------------+ |        |         +---------------+             |          +------------------+
        					 	 |               | +--------v--------->内存物理地址   +-------------v---------->           |      |
                                 +---------------+                    +---------------+                        +-----------+      |
                                              		从页目录项中得到一|               | 根据页表项中存储的物理 |           |
                                              		个页表在物理内存中+---------------+ 基地址加上线性地址中指 +-----------+     4KB
                                              		的基地址加上线性地            		定的偏移量,得到最终分配|           |
                                              		址中指定的页表的偏             		的一页内存的基地址     +-----------+      |
                                              		移量                                                       |           |      |
                                                                                                               +------------------+
                                                                                                               |           |
                                                                                                               +-----------+
                                                                                                               |           |
                                                                                                               +-----------+
                                                                                                               |           |
                                                                                                               +-----------+
                                                                                                               |           |
                                                                                                               +-----------+
关于不同程序相同线性地址的问题:
不同两个程序,程序A和程序B很有可能用到一个相同的线性地址Add_0xEF23E,因为操作系统为每个程序建立了一套页表映射关系,那么程序A经过自己的页表映射后Add_0xEF23E被映射到物理内存的0xEEA123处
程序B经过自己的页表映射后Add_0xEF23E被映射到物理内存的0xF45E4处,那么程序A和程序B虽然执行相同线性地址空间中的内容却可以互不影响的运行

	 	
	
 * 
 */

	@Test
	public void move() {
		//
		long addr = 0x0fffe333;
		long tmp = (addr>>12)<<2;
		System.out.println(tmp&0xffc);
		
		long oth = (addr>>10)&0xffc;
		System.out.println(oth);
		System.out.println(Integer.parseInt("ffc", 16));
		//msg:;sr:4092;len:12:111111111100
		MovPrint.pInt(Integer.parseInt("ffc", 16));
	}
	
/*	
 * ((unsigned long*)
			(((address>>10)&0xffc) + (oxfffff000 & *((unsigned long *) ((address>>20) & oxffc)))))
			

(
	(unsigned long*)(
		(
			(address>>10) & 0xffc
		) + (
				oxfffff000 & *(		(unsigned long *) ((address>>20) & oxffc)	)
			)
	)

)
			
			
			*
			*/

}
