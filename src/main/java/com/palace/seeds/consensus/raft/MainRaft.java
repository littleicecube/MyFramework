package com.palace.seeds.consensus.raft;

public class MainRaft {

	/**
	 *	选主：
	 *	服务启动时都是处于跟随着的状态
	 *	跟随者转变成候选人状态发起投票
	 *		一个候选人发起投票
	 *			1）可能超时没有得到响应
	 *			2）得到少部分的响应，有的是同意，有的是拒绝
	 *			3）可能在投票期间得到其他候选人发送过来的投票请求
	 *	
	 *	日志的一致性和存储：
	 *		flower可能受到来自客户端的请求，如果是写请求，flower将leader的地址告诉客户端，客户端将将请求发送到leader
	 *		leader接收到来自客户端的请求，然后将请求并行的发送到flower，flower将日志请求应用到本地状态机后，然后相应leader
	 *			如果（在超时时间内）受到多于半数机器的成功相应，那么认为日志提交成功，然后相应客户端成功
	 *		新的leader不会提交上一个leader未提交的日志
	 *			会丢失上一个leader已经提交的日志
	 *			会丢失上一个leader没有提交的日志
	 *
	 *
	 *		
	 */
}
